<?php

require_once __DIR__ . '/vendor/autoload.php';

use App\Http\Controllers\MikrotikController;
use App\Models\User;
use Illuminate\Support\Facades\Log;

echo "=== TESTE DE INTEGRA√á√ÉO MIKROTIK ===\n";
echo "Testando conex√£o e funcionalidades...\n\n";

// Configurar ambiente de teste
$_ENV['APP_ENV'] = 'testing';

try {
    // 1. Teste de conex√£o b√°sica
    echo "1. Testando conex√£o com MikroTik...\n";
    
    $mikrotikController = new MikrotikController();
    
    // Criar usu√°rio de teste
    $testMac = '02:TEST:' . strtoupper(substr(md5(time()), 0, 8));
    echo "   MAC de teste: {$testMac}\n";
    
    // Criar usu√°rio no banco
    $testUser = User::create([
        'mac_address' => $testMac,
        'ip_address' => '10.10.10.150',
        'status' => 'pending',
        'created_at' => now(),
        'updated_at' => now()
    ]);
    
    echo "   ‚úÖ Usu√°rio de teste criado: ID {$testUser->id}\n";
    
    // 2. Teste de libera√ß√£o de acesso
    echo "\n2. Testando libera√ß√£o de acesso...\n";
    
    $response = $mikrotikController->allowDeviceByUser($testUser);
    
    if ($response->getData()->success) {
        echo "   ‚úÖ Dispositivo liberado com sucesso\n";
    } else {
        echo "   ‚ùå Falha ao liberar dispositivo: " . $response->getData()->message . "\n";
    }
    
    // 3. Teste de consulta de status
    echo "\n3. Testando consulta de status...\n";
    
    $statusResponse = $mikrotikController->getStatus($testMac);
    $statusData = $statusResponse->getData();
    
    echo "   MAC: " . $statusData->mac_address . "\n";
    echo "   Status: " . $statusData->status . "\n";
    echo "   Conectado: " . ($statusData->connected ? 'Sim' : 'N√£o') . "\n";
    
    // 4. Teste de dados de uso
    echo "\n4. Testando consulta de uso...\n";
    
    $usageResponse = $mikrotikController->getUsage($testMac);
    $usageData = $usageResponse->getData();
    
    echo "   Dados usados: " . $usageData->data_used . " bytes\n";
    echo "   Dura√ß√£o da sess√£o: " . $usageData->session_duration . " minutos\n";
    echo "   Velocidade download: " . $usageData->download_speed . " kbps\n";
    echo "   Velocidade upload: " . $usageData->upload_speed . " kbps\n";
    
    // 5. Teste de bloqueio
    echo "\n5. Testando bloqueio de dispositivo...\n";
    
    $blockRequest = new \Illuminate\Http\Request(['mac_address' => $testMac]);
    $blockResponse = $mikrotikController->blockDevice($blockRequest);
    
    if ($blockResponse->getData()->success) {
        echo "   ‚úÖ Dispositivo bloqueado com sucesso\n";
    } else {
        echo "   ‚ùå Falha ao bloquear dispositivo: " . $blockResponse->getData()->message . "\n";
    }
    
    // 6. Simula√ß√£o de pagamento aprovado
    echo "\n6. Simulando pagamento aprovado...\n";
    
    // Criar pagamento de teste
    $payment = \App\Models\Payment::create([
        'user_id' => $testUser->id,
        'amount' => 0.05,
        'payment_type' => 'pix',
        'status' => 'pending',
        'transaction_id' => 'TEST_' . time(),
        'created_at' => now(),
        'updated_at' => now()
    ]);
    
    echo "   Pagamento criado: ID {$payment->id}\n";
    
    // Simular aprova√ß√£o do pagamento
    $paymentController = new \App\Http\Controllers\PaymentController();
    
    // Usar reflection para acessar m√©todo privado
    $reflection = new ReflectionClass($paymentController);
    $method = $reflection->getMethod('activateUserAccess');
    $method->setAccessible(true);
    
    $method->invoke($paymentController, $payment);
    
    echo "   ‚úÖ Pagamento processado e acesso liberado\n";
    
    // Verificar se usu√°rio foi liberado
    $testUser->refresh();
    echo "   Status do usu√°rio ap√≥s pagamento: " . $testUser->status . "\n";
    echo "   Conectado em: " . ($testUser->connected_at ?? 'N√£o conectado') . "\n";
    echo "   Expira em: " . ($testUser->expires_at ?? 'Sem expira√ß√£o') . "\n";
    
    // 7. Limpeza
    echo "\n7. Limpando dados de teste...\n";
    
    // Remover dados de teste
    $testUser->payments()->delete();
    $testUser->sessions()->delete();
    $testUser->delete();
    
    echo "   ‚úÖ Dados de teste removidos\n";
    
    echo "\n=== TESTE CONCLU√çDO COM SUCESSO ===\n";
    echo "‚úÖ Todos os componentes est√£o funcionando corretamente!\n";
    echo "\nPr√≥ximos passos:\n";
    echo "1. Configure o MikroTik com o script mikrotik-hotspot-integrado.rsc\n";
    echo "2. Verifique as vari√°veis de ambiente no .env\n";
    echo "3. Teste com um dispositivo real conectado ao WiFi\n";
    
} catch (Exception $e) {
    echo "\n‚ùå ERRO NO TESTE: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
    
    // Tentar limpar dados de teste mesmo com erro
    try {
        if (isset($testUser)) {
            $testUser->payments()->delete();
            $testUser->sessions()->delete();
            $testUser->delete();
            echo "\nüßπ Dados de teste limpos ap√≥s erro\n";
        }
    } catch (Exception $cleanupError) {
        echo "‚ùå Erro na limpeza: " . $cleanupError->getMessage() . "\n";
    }
    
    echo "\n=== DIAGN√ìSTICO ===\n";
    echo "Poss√≠veis causas:\n";
    echo "1. MikroTik n√£o est√° acess√≠vel no IP configurado\n";
    echo "2. Usu√°rio da API n√£o existe ou senha incorreta\n";
    echo "3. API do MikroTik est√° desabilitada\n";
    echo "4. Firewall bloqueando conex√£o na porta 8728\n";
    echo "5. Configura√ß√£o incorreta no .env\n";
    
    echo "\nVerifique:\n";
    echo "- MIKROTIK_HOST=" . config('wifi.mikrotik.host') . "\n";
    echo "- MIKROTIK_USERNAME=" . config('wifi.mikrotik.username') . "\n";
    echo "- MIKROTIK_API_ENABLED=" . (config('wifi.mikrotik.api_enabled') ? 'true' : 'false') . "\n";
}

echo "\n=== FIM DO TESTE ===\n"; 