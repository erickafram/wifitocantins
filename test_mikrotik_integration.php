<?php

// Bootstrap Laravel application properly
require_once __DIR__ . '/vendor/autoload.php';

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

echo "=== TESTE DE INTEGRA√á√ÉO MIKROTIK ===\n";
echo "Testando conex√£o e funcionalidades...\n\n";

try {
    // Bootstrap Laravel Application
    $app = require_once __DIR__ . '/bootstrap/app.php';
    $kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
    $kernel->bootstrap();

    // Set environment
    $app->detectEnvironment(function() {
        return 'production';
    });

    echo "‚úÖ Laravel bootstrapped successfully\n";

    // 1. Verificar configura√ß√µes
    echo "\n1. Verificando configura√ß√µes...\n";
    
    $mikrotikHost = config('wifi.mikrotik.host', 'NOT_SET');
    $mikrotikUser = config('wifi.mikrotik.username', 'NOT_SET');
    $mikrotikEnabled = config('wifi.mikrotik.api_enabled', false);
    
    echo "   Host MikroTik: {$mikrotikHost}\n";
    echo "   Usu√°rio API: {$mikrotikUser}\n";
    echo "   API Habilitada: " . ($mikrotikEnabled ? 'Sim' : 'N√£o') . "\n";
    
    if ($mikrotikHost === 'NOT_SET' || $mikrotikUser === 'NOT_SET') {
        throw new Exception('Configura√ß√µes MikroTik n√£o encontradas. Verifique o arquivo .env');
    }

    // 2. Teste de conex√£o b√°sica
    echo "\n2. Testando conex√£o com MikroTik...\n";
    
    $mikrotikController = new \App\Http\Controllers\MikrotikController();
    
    // Criar usu√°rio de teste
    $testMac = '02:TEST:' . strtoupper(substr(md5(time()), 0, 8));
    echo "   MAC de teste: {$testMac}\n";
    
    // Criar usu√°rio no banco
    $testUser = \App\Models\User::create([
        'mac_address' => $testMac,
        'ip_address' => '10.10.10.150',
        'status' => 'pending',
        'created_at' => now(),
        'updated_at' => now()
    ]);
    
    echo "   ‚úÖ Usu√°rio de teste criado: ID {$testUser->id}\n";
    
    // 3. Teste de libera√ß√£o de acesso
    echo "\n3. Testando libera√ß√£o de acesso...\n";
    
    $response = $mikrotikController->allowDeviceByUser($testUser);
    $responseData = $response->getData();
    
    if (isset($responseData->success) && $responseData->success) {
        echo "   ‚úÖ Dispositivo liberado com sucesso\n";
    } else {
        $message = isset($responseData->message) ? $responseData->message : 'Erro desconhecido';
        echo "   ‚ö†Ô∏è Resposta da libera√ß√£o: {$message}\n";
    }
    
    // 4. Teste de consulta de status
    echo "\n4. Testando consulta de status...\n";
    
    $statusResponse = $mikrotikController->getStatus($testMac);
    $statusData = $statusResponse->getData();
    
    echo "   MAC: " . ($statusData->mac_address ?? 'N/A') . "\n";
    echo "   Status: " . ($statusData->status ?? 'N/A') . "\n";
    echo "   Conectado: " . (isset($statusData->connected) && $statusData->connected ? 'Sim' : 'N√£o') . "\n";
    
    // 5. Teste de dados de uso
    echo "\n5. Testando consulta de uso...\n";
    
    $usageResponse = $mikrotikController->getUsage($testMac);
    $usageData = $usageResponse->getData();
    
    echo "   Dados usados: " . ($usageData->data_used ?? 0) . " bytes\n";
    echo "   Dura√ß√£o da sess√£o: " . ($usageData->session_duration ?? 0) . " minutos\n";
    echo "   Velocidade download: " . ($usageData->download_speed ?? 0) . " kbps\n";
    echo "   Velocidade upload: " . ($usageData->upload_speed ?? 0) . " kbps\n";
    
    // 6. Teste de bloqueio
    echo "\n6. Testando bloqueio de dispositivo...\n";
    
    $blockRequest = Request::create('/api/mikrotik/block', 'POST', ['mac_address' => $testMac]);
    $blockResponse = $mikrotikController->blockDevice($blockRequest);
    $blockData = $blockResponse->getData();
    
    if (isset($blockData->success) && $blockData->success) {
        echo "   ‚úÖ Dispositivo bloqueado com sucesso\n";
    } else {
        $message = isset($blockData->message) ? $blockData->message : 'Erro desconhecido';
        echo "   ‚ö†Ô∏è Resposta do bloqueio: {$message}\n";
    }
    
    // 7. Simula√ß√£o de pagamento aprovado
    echo "\n7. Simulando pagamento aprovado...\n";
    
    // Criar pagamento de teste
    $payment = \App\Models\Payment::create([
        'user_id' => $testUser->id,
        'amount' => 0.05,
        'payment_type' => 'pix',
        'status' => 'pending',
        'transaction_id' => 'TEST_' . time(),
        'created_at' => now(),
        'updated_at' => now()
    ]);
    
    echo "   Pagamento criado: ID {$payment->id}\n";
    
    // Simular aprova√ß√£o do pagamento usando o PaymentController
    $paymentController = new \App\Http\Controllers\PaymentController();
    
    // Usar reflection para acessar m√©todo privado
    $reflection = new ReflectionClass($paymentController);
    $method = $reflection->getMethod('activateUserAccess');
    $method->setAccessible(true);
    
    try {
        $method->invoke($paymentController, $payment);
        echo "   ‚úÖ Pagamento processado e acesso liberado\n";
    } catch (Exception $e) {
        echo "   ‚ö†Ô∏è Erro ao processar pagamento: " . $e->getMessage() . "\n";
    }
    
    // Verificar se usu√°rio foi liberado
    $testUser->refresh();
    echo "   Status do usu√°rio ap√≥s pagamento: " . $testUser->status . "\n";
    echo "   Conectado em: " . ($testUser->connected_at ?? 'N√£o conectado') . "\n";
    echo "   Expira em: " . ($testUser->expires_at ?? 'Sem expira√ß√£o') . "\n";
    
    // 8. Verificar sess√µes criadas
    echo "\n8. Verificando sess√µes criadas...\n";
    
    $sessions = \App\Models\Session::where('user_id', $testUser->id)->get();
    echo "   Total de sess√µes: " . $sessions->count() . "\n";
    
    foreach ($sessions as $session) {
        echo "   - Sess√£o ID {$session->id}: {$session->session_status} (iniciada em {$session->started_at})\n";
    }
    
    // 9. Limpeza
    echo "\n9. Limpando dados de teste...\n";
    
    // Remover dados de teste
    $testUser->payments()->delete();
    $testUser->sessions()->delete();
    $testUser->delete();
    
    echo "   ‚úÖ Dados de teste removidos\n";
    
    echo "\n=== TESTE CONCLU√çDO COM SUCESSO ===\n";
    echo "‚úÖ Todos os componentes est√£o funcionando!\n";
    
    // Verificar se h√° problemas de conectividade com MikroTik
    if (!config('wifi.mikrotik.api_enabled', false)) {
        echo "\n‚ö†Ô∏è AVISO: API MikroTik est√° DESABILITADA\n";
        echo "   O sistema est√° funcionando em modo simula√ß√£o.\n";
        echo "   Para habilitar a integra√ß√£o real:\n";
        echo "   1. Configure o MikroTik com o script fornecido\n";
        echo "   2. Defina MIKROTIK_API_ENABLED=true no .env\n";
    } else {
        echo "\n‚úÖ API MikroTik est√° HABILITADA\n";
        echo "   Sistema funcionando com integra√ß√£o real.\n";
    }
    
    echo "\nPr√≥ximos passos:\n";
    echo "1. Configure o MikroTik com o script mikrotik-hotspot-integrado.rsc\n";
    echo "2. Verifique as vari√°veis de ambiente no .env\n";
    echo "3. Teste com um dispositivo real conectado ao WiFi\n";
    
} catch (Exception $e) {
    echo "\n‚ùå ERRO NO TESTE: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
    
    // Tentar limpar dados de teste mesmo com erro
    try {
        if (isset($testUser) && $testUser->exists) {
            $testUser->payments()->delete();
            $testUser->sessions()->delete();
            $testUser->delete();
            echo "\nüßπ Dados de teste limpos ap√≥s erro\n";
        }
    } catch (Exception $cleanupError) {
        echo "‚ùå Erro na limpeza: " . $cleanupError->getMessage() . "\n";
    }
    
    echo "\n=== DIAGN√ìSTICO ===\n";
    echo "Poss√≠veis causas:\n";
    echo "1. Laravel n√£o foi bootstrapped corretamente\n";
    echo "2. Arquivo .env n√£o encontrado ou configura√ß√£o incorreta\n";
    echo "3. Banco de dados n√£o acess√≠vel\n";
    echo "4. MikroTik n√£o est√° acess√≠vel no IP configurado\n";
    echo "5. Usu√°rio da API n√£o existe ou senha incorreta\n";
    echo "6. API do MikroTik est√° desabilitada\n";
    echo "7. Firewall bloqueando conex√£o na porta 8728\n";
    
    echo "\nVerifique:\n";
    try {
        echo "- APP_ENV=" . config('app.env', 'NOT_SET') . "\n";
        echo "- MIKROTIK_HOST=" . config('wifi.mikrotik.host', 'NOT_SET') . "\n";
        echo "- MIKROTIK_USERNAME=" . config('wifi.mikrotik.username', 'NOT_SET') . "\n";
        echo "- MIKROTIK_API_ENABLED=" . (config('wifi.mikrotik.api_enabled', false) ? 'true' : 'false') . "\n";
    } catch (Exception $configError) {
        echo "‚ùå Erro ao ler configura√ß√µes: " . $configError->getMessage() . "\n";
        echo "\nVerifique se o arquivo .env existe e est√° configurado corretamente.\n";
    }
}

echo "\n=== FIM DO TESTE ===\n"; 