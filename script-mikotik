:local url "https://www.tocantinstransportewifi.com.br/api/mikrotik/check-paid-users?token=mikrotik-sync-2024";
:local hotspotServer "tocantins-hotspot";
:local bypassComment "AUTO-PAGO";

:local result [/tool fetch url=$url mode=https http-method=get output=user check-certificate=no as-value];
:if ([:typeof $result] = "nothing") do={
    :log error "Fetch sem retorno";
    :return;
}

:local status ($result->"status");
:if ($status != "finished") do={
    :log error ("Fetch falhou: " . $status);
    :return;
}

:local payload ($result->"data");
:if ([:len $payload] = 0) do={
    :log info "Nenhum dado recebido";
    :return;
}

:local liberateToken "\"liberate_macs\":[";
:local blockToken "\"block_macs\":[";
:local macMarker "\"mac_address\":\"";
:local macMarkerLen [:len $macMarker];

:local liberados 0;
:local bloqueados 0;

# --------------------------------------------------
# Extrair seção de liberação
# --------------------------------------------------
:local liberateArray "";
:local liberateStart [:find $payload $liberateToken];
:if ($liberateStart != -1) do={
    :local start ($liberateStart + [:len $liberateToken]);
    :local end [:find $payload "]" $start];
    :if ($end != -1) do={
        :set liberateArray [:pick $payload $start $end];
    }
}

# --------------------------------------------------
# Extrair seção de bloqueio
# --------------------------------------------------
:local blockArray "";
:local blockStart [:find $payload $blockToken];
:if ($blockStart != -1) do={
    :local start ($blockStart + [:len $blockToken]);
    :local end [:find $payload "]" $start];
    :if ($end != -1) do={
        :set blockArray [:pick $payload $start $end];
    }
}

# --------------------------------------------------
# Processar liberação
# --------------------------------------------------
:if ([:len [:trim $liberateArray]] > 0) do={
    :local pos 0;
    :while (true) do={
        :set pos [:find $liberateArray $macMarker $pos];
        :if ($pos = -1) do={ :break; }

        :local start ($pos + $macMarkerLen);
        :local end [:find $liberateArray "\"" $start];
        :if ($end = -1) do={ :break; }

        :local mac [:toupper [:pick $liberateArray $start $end]];
        :set pos ($end + 1);

        :if ([:len $mac] != 17) do={
            :log warning ("MAC invalido em liberate_macs: " . $mac);
            :continue;
        }

        :do {/ip hotspot ip-binding remove [find mac-address=$mac];} on-error={}
        :do {/ip hotspot user remove [find mac-address=$mac];} on-error={}
        :do {/ip hotspot active remove [find mac-address=$mac];} on-error={}

        :local addOk true;
        :do {
            /ip hotspot ip-binding add mac-address=$mac type=bypassed comment=$bypassComment disabled=no server=$hotspotServer;
        } on-error={
            :set addOk false;
            :log error ("Falha ao adicionar binding para " . $mac . ": " . $message);
        }

        :if ($addOk) do={
            :set liberados ($liberados + 1);
            :log info ("Liberado via API: " . $mac);
        }
    }
}

# --------------------------------------------------
# Processar bloqueio
# --------------------------------------------------
:if ([:len [:trim $blockArray]] > 0) do={
    :local pos 0;
    :while (true) do={
        :set pos [:find $blockArray $macMarker $pos];
        :if ($pos = -1) do={ :break; }

        :local start ($pos + $macMarkerLen);
        :local end [:find $blockArray "\"" $start];
        :if ($end = -1) do={ :break; }

        :local mac [:toupper [:pick $blockArray $start $end]];
        :set pos ($end + 1);

        :if ([:len $mac] != 17) do={
            :log warning ("MAC invalido em block_macs: " . $mac);
            :continue;
        }

        :do {/ip hotspot ip-binding remove [find mac-address=$mac];} on-error={}
        :do {/ip hotspot user remove [find mac-address=$mac];} on-error={}
        :do {/ip hotspot active remove [find mac-address=$mac];} on-error={}

        :set bloqueados ($bloqueados + 1);
        :log info ("Bloqueado via API: " . $mac);
    }
}

# --------------------------------------------------
# Resumo final
# --------------------------------------------------
:log info ("Resumo sincronizacao - liberados: " . $liberados . " / bloqueados: " . $bloqueados);