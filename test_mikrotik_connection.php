<?php

require_once __DIR__ . '/vendor/autoload.php';

// Bootstrap Laravel
$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "=== DIAGN√ìSTICO DE CONEX√ÉO MIKROTIK ===\n";
echo "Testando conectividade espec√≠fica...\n\n";

// Configura√ß√µes
$mikrotikHost = config('wifi.mikrotik.host', '192.168.10.1');
$mikrotikUser = config('wifi.mikrotik.username', 'api-tocantins');
$mikrotikPass = config('wifi.mikrotik.password', 'TocantinsWiFi2024!');
$mikrotikPort = config('wifi.mikrotik.port', 8728);

echo "üìã CONFIGURA√á√ïES ATUAIS:\n";
echo "   Host: {$mikrotikHost}\n";
echo "   Usu√°rio: {$mikrotikUser}\n";
echo "   Senha: " . str_repeat('*', strlen($mikrotikPass)) . "\n";
echo "   Porta: {$mikrotikPort}\n\n";

// 1. Teste de conectividade b√°sica (ping)
echo "1. üåê Testando conectividade de rede...\n";

$pingCommand = "ping -c 3 {$mikrotikHost}";
$pingOutput = [];
$pingReturn = 0;

exec($pingCommand, $pingOutput, $pingReturn);

if ($pingReturn === 0) {
    echo "   ‚úÖ MikroTik responde ao ping\n";
    foreach ($pingOutput as $line) {
        if (strpos($line, 'time=') !== false) {
            echo "   üì∂ {$line}\n";
            break;
        }
    }
} else {
    echo "   ‚ùå MikroTik N√ÉO responde ao ping\n";
    echo "   üîç Verifique:\n";
    echo "      - IP correto no .env\n";
    echo "      - MikroTik ligado e conectado\n";
    echo "      - Rede acess√≠vel\n";
}

echo "\n";

// 2. Teste de porta da API
echo "2. üîå Testando porta da API ({$mikrotikPort})...\n";

$socket = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if ($socket) {
    socket_set_option($socket, SOL_SOCKET, SO_RCVTIMEO, ['sec' => 5, 'usec' => 0]);
    socket_set_option($socket, SOL_SOCKET, SO_SNDTIMEO, ['sec' => 5, 'usec' => 0]);
    
    $result = @socket_connect($socket, $mikrotikHost, $mikrotikPort);
    
    if ($result) {
        echo "   ‚úÖ Porta {$mikrotikPort} est√° aberta\n";
        socket_close($socket);
    } else {
        echo "   ‚ùå Porta {$mikrotikPort} n√£o est√° acess√≠vel\n";
        echo "   üîç Poss√≠veis causas:\n";
        echo "      - API n√£o habilitada no MikroTik\n";
        echo "      - Firewall bloqueando\n";
        echo "      - Porta diferente\n";
        socket_close($socket);
    }
} else {
    echo "   ‚ùå Erro ao criar socket\n";
}

echo "\n";

// 3. Teste de conex√£o RouterOS API
echo "3. üîê Testando autentica√ß√£o RouterOS API...\n";

try {
    $mikrotikController = new \App\Http\Controllers\MikrotikController();
    
    // Usar reflection para testar m√©todo privado de conex√£o
    $reflection = new ReflectionClass($mikrotikController);
    $connectMethod = $reflection->getMethod('connectToMikroTik');
    $connectMethod->setAccessible(true);
    
    $apiSocket = $connectMethod->invoke($mikrotikController);
    
    if ($apiSocket) {
        echo "   ‚úÖ Conex√£o RouterOS API bem-sucedida!\n";
        echo "   ‚úÖ Autentica√ß√£o funcionando\n";
        socket_close($apiSocket);
    }
    
} catch (Exception $e) {
    echo "   ‚ùå Erro na API RouterOS: " . $e->getMessage() . "\n";
    
    if (strpos($e->getMessage(), 'conectar') !== false) {
        echo "   üîç Problema de conectividade de rede\n";
    } elseif (strpos($e->getMessage(), 'autentica√ß√£o') !== false || strpos($e->getMessage(), 'login') !== false) {
        echo "   üîç Problema de autentica√ß√£o\n";
        echo "      - Usu√°rio '{$mikrotikUser}' existe no MikroTik?\n";
        echo "      - Senha est√° correta?\n";
        echo "      - Usu√°rio tem permiss√µes 'full'?\n";
    } elseif (strpos($e->getMessage(), 'desabilitada') !== false) {
        echo "   üîç API est√° desabilitada no .env\n";
    }
}

echo "\n";

// 4. Comandos para verificar no MikroTik
echo "4. üõ†Ô∏è COMANDOS PARA VERIFICAR NO MIKROTIK:\n";
echo "\n";
echo "   No terminal do MikroTik, execute:\n";
echo "\n";
echo "   # Verificar se API est√° habilitada:\n";
echo "   /ip service print\n";
echo "\n";
echo "   # Verificar usu√°rios:\n";
echo "   /user print\n";
echo "\n";
echo "   # Criar usu√°rio se n√£o existir:\n";
echo "   /user add name=api-tocantins password=TocantinsWiFi2024! group=full\n";
echo "\n";
echo "   # Habilitar API se necess√°rio:\n";
echo "   /ip service set api disabled=no port=8728\n";
echo "\n";
echo "   # Verificar hotspot (se j√° configurado):\n";
echo "   /ip hotspot print\n";
echo "   /ip hotspot user print\n";

echo "\n";

// 5. Solu√ß√µes baseadas no diagn√≥stico
echo "5. üéØ PR√ìXIMOS PASSOS:\n";
echo "\n";

if ($pingReturn !== 0) {
    echo "   ‚ùå SEM CONECTIVIDADE DE REDE:\n";
    echo "      1. Verifique o IP do MikroTik\n";
    echo "      2. Confirme que est√° na mesma rede\n";
    echo "      3. Teste outros IPs (10.10.10.1, 192.168.88.1)\n";
    echo "\n";
} else {
    echo "   ‚úÖ REDE OK - Problema na configura√ß√£o da API:\n";
    echo "      1. Conecte no MikroTik via Winbox\n";
    echo "      2. Execute os comandos acima\n";
    echo "      3. Teste novamente\n";
    echo "\n";
}

echo "6. üîÑ TESTE R√ÅPIDO:\n";
echo "\n";
echo "   Execute estes comandos no MikroTik:\n";
echo "\n";
echo "   /user add name=api-tocantins password=TocantinsWiFi2024! group=full\n";
echo "   /ip service set api disabled=no port=8728\n";
echo "\n";
echo "   Depois execute novamente:\n";
echo "   php test_mikrotik_integration.php\n";

echo "\n=== FIM DO DIAGN√ìSTICO ===\n"; 