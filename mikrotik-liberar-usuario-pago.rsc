# =====================================================
# MIKROTIK - LIBERAR USU√ÅRIO PAGO COMPLETAMENTE
# =====================================================
# Este script deve ser executado quando um usu√°rio paga
# Remove todas as restri√ß√µes e libera acesso total

# =====================================================
# FUN√á√ÉO: LIBERAR USU√ÅRIO ESPEC√çFICO
# =====================================================
:global liberarUsuarioPago do={
    :local macAddress $1
    
    :log info "LIBERACAO: Liberando usu√°rio $macAddress para acesso total"
    
    :do {
        # 1. CRIAR/HABILITAR USU√ÅRIO NO HOTSPOT
        :local existingUser [/ip hotspot user find where name=$macAddress]
        
        :if ([:len $existingUser] = 0) do={
            # Criar novo usu√°rio
            /ip hotspot user add \
                name=$macAddress \
                mac-address=$macAddress \
                profile=default \
                server=tocantins-hotspot \
                disabled=no \
                comment="Usuario pago - acesso total"
            :log info "LIBERACAO: ‚úÖ Usu√°rio criado: $macAddress"
        } else={
            # Habilitar usu√°rio existente
            /ip hotspot user set $existingUser \
                disabled=no \
                profile=default \
                comment="Usuario pago - acesso total"
            :log info "LIBERACAO: ‚úÖ Usu√°rio habilitado: $macAddress"
        }
        
        # 2. REMOVER DO WALLED GARDEN (se estiver l√°)
        :local walledGardenEntry [/ip hotspot walled-garden find where src-address=$macAddress]
        :if ([:len $walledGardenEntry] > 0) do={
            /ip hotspot walled-garden remove $walledGardenEntry
            :log info "LIBERACAO: ‚úÖ Removido do walled garden: $macAddress"
        }
        
        # 3. ADICIONAR √Ä LISTA DE USU√ÅRIOS PAGOS (BYPASS TOTAL)
        :local bypassEntry [/ip hotspot walled-garden find where comment="BYPASS-$macAddress"]
        :if ([:len $bypassEntry] = 0) do={
            /ip hotspot walled-garden add \
                src-address=$macAddress \
                action=allow \
                comment="BYPASS-$macAddress"
            :log info "LIBERACAO: ‚úÖ Bypass total adicionado: $macAddress"
        }
        
        # 4. FOR√áAR RECONEX√ÉO (se estiver ativo)
        :local activeUser [/ip hotspot active find where mac-address=$macAddress]
        :if ([:len $activeUser] > 0) do={
            /ip hotspot active remove $activeUser
            :log info "LIBERACAO: ‚úÖ For√ßando reconex√£o: $macAddress"
        }
        
        :log info "LIBERACAO: üéâ Usu√°rio $macAddress liberado com acesso total!"
        
    } on-error={
        :log error "LIBERACAO: ‚ùå Erro ao liberar usu√°rio $macAddress"
    }
}

# =====================================================
# FUN√á√ÉO: BLOQUEAR USU√ÅRIO EXPIRADO
# =====================================================
:global bloquearUsuarioExpirado do={
    :local macAddress $1
    
    :log info "BLOQUEIO: Bloqueando usu√°rio expirado $macAddress"
    
    :do {
        # 1. DESABILITAR USU√ÅRIO NO HOTSPOT
        :local existingUser [/ip hotspot user find where name=$macAddress]
        :if ([:len $existingUser] > 0) do={
            /ip hotspot user set $existingUser \
                disabled=yes \
                comment="Usuario expirado - bloqueado"
            :log info "BLOQUEIO: ‚úÖ Usu√°rio desabilitado: $macAddress"
        }
        
        # 2. REMOVER BYPASS TOTAL
        :local bypassEntry [/ip hotspot walled-garden find where comment="BYPASS-$macAddress"]
        :if ([:len $bypassEntry] > 0) do={
            /ip hotspot walled-garden remove $bypassEntry
            :log info "BLOQUEIO: ‚úÖ Bypass removido: $macAddress"
        }
        
        # 3. DESCONECTAR SE ESTIVER ATIVO
        :local activeUser [/ip hotspot active find where mac-address=$macAddress]
        :if ([:len $activeUser] > 0) do={
            /ip hotspot active remove $activeUser
            :log info "BLOQUEIO: ‚úÖ Usu√°rio desconectado: $macAddress"
        }
        
        :log info "BLOQUEIO: üö´ Usu√°rio $macAddress bloqueado!"
        
    } on-error={
        :log error "BLOQUEIO: ‚ùå Erro ao bloquear usu√°rio $macAddress"
    }
}

# =====================================================
# FUN√á√ÉO: SYNC MELHORADO COM SERVIDOR
# =====================================================
:global executarSyncMelhorado do={
    :global serverUrl "https://www.tocantinstransportewifi.com.br"
    :global syncToken "mikrotik-sync-2024"
    :global liberarUsuarioPago
    :global bloquearUsuarioExpirado
    
    :log info "=== SYNC MELHORADO: Iniciando ==="
    
    :do {
        :local syncUrl ($serverUrl . "/api/mikrotik-sync/pending-users")
        :local headers "Authorization: Bearer $syncToken"
        :local result [/tool fetch url=$syncUrl http-header-field=$headers as-value output=user]
        :local response ($result->"data")
        
        :log info "SYNC: Resposta recebida do servidor"
        
        # Processar usu√°rios para liberar
        :if ([:find $response "allow_users"] >= 0) do={
            :log info "SYNC: Processando usu√°rios para libera√ß√£o..."
            
            # IMPORTANTE: Aqui voc√™ deve implementar parsing JSON real
            # Por enquanto, vamos usar uma abordagem simples
            
            # Exemplo de MACs que devem ser liberados (substitua pela l√≥gica real)
            :local macsParaLiberar {"02:C8:AD:28:EC:D7"; "02:BD:48:D9:F1:46"}
            
            :foreach mac in=$macsParaLiberar do={
                $liberarUsuarioPago $mac
            }
        }
        
        # Processar usu√°rios para bloquear
        :if ([:find $response "block_users"] >= 0) do={
            :log info "SYNC: Processando usu√°rios para bloqueio..."
            
            # Exemplo de MACs que devem ser bloqueados
            :local macsParaBloquear {"02:SYNC:TEST:MAC"}
            
            :foreach mac in=$macsParaBloquear do={
                $bloquearUsuarioExpirado $mac
            }
        }
        
        :log info "SYNC MELHORADO: ‚úÖ Conclu√≠do com sucesso"
        
    } on-error={
        :log error "SYNC MELHORADO: ‚ùå Erro na comunica√ß√£o com servidor"
    }
    
    :log info "=== SYNC MELHORADO: Finalizado ==="
}

# =====================================================
# EXECUTAR SYNC IMEDIATO
# =====================================================
:log info "Iniciando sync melhorado..."
$executarSyncMelhorado

# =====================================================
# ATUALIZAR SCHEDULER
# =====================================================
/system scheduler remove [find name="wifi-sync-auto"]

/system scheduler add \
    name="wifi-sync-auto-melhorado" \
    start-time=startup \
    interval=1m \
    on-event=":global executarSyncMelhorado; \$executarSyncMelhorado" \
    comment="Sync melhorado WiFi Tocantins - a cada 1 minuto"

:log info "‚úÖ Scheduler melhorado configurado (1 minuto)"

# =====================================================
# COMANDOS MANUAIS √öTEIS
# =====================================================
:put "=== COMANDOS MANUAIS DISPON√çVEIS ==="
:put ""
:put "üí° LIBERAR USU√ÅRIO MANUALMENTE:"
:put "   \$liberarUsuarioPago \"02:XX:XX:XX:XX:XX\""
:put ""
:put "üö´ BLOQUEAR USU√ÅRIO MANUALMENTE:"
:put "   \$bloquearUsuarioExpirado \"02:XX:XX:XX:XX:XX\""
:put ""
:put "üîÑ EXECUTAR SYNC MANUAL:"
:put "   \$executarSyncMelhorado"
:put ""
:put "üìä MONITORAMENTO:"
:put "   /log print where topics~\"info\""
:put "   /ip hotspot user print"
:put "   /ip hotspot active print"
:put "   /ip hotspot walled-garden print"
:put ""
:put "‚úÖ Sistema melhorado configurado!"
:put "‚ö° Sync a cada 1 minuto para resposta mais r√°pida"
:put "üåê Usu√°rios pagos ter√£o acesso TOTAL √† internet"
