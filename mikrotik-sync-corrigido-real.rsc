# =====================================================
# MIKROTIK - SYNC CORRIGIDO COM MACs REAIS DO BANCO
# =====================================================
# Baseado nos dados reais do banco de dados atual

# =====================================================
# FUN√á√ÉO: EXECUTAR SYNC COM MACs REAIS
# =====================================================
:global executarSyncCorrigido do={
    :global serverUrl "https://www.tocantinstransportewifi.com.br"
    :global syncToken "mikrotik-sync-2024"
    :global liberarUsuarioPago
    
    :log info "=== SYNC CORRIGIDO: Iniciando com MACs reais ==="
    
    # MACs REAIS dos usu√°rios com status 'connected' no banco
    # Baseado no SQL fornecido pelo usu√°rio
    :local macsConectados {
        "02:BD:48:D9:F1:38";
        "02:BD:48:D9:F1:FE"
    }
    
    # Testar conectividade primeiro
    :do {
        :local pingUrl ($serverUrl . "/api/mikrotik-sync/ping")
        :local result [/tool fetch url=$pingUrl as-value output=user]
        :local response ($result->"data")
        
        :if ([:find $response "success"] >= 0) do={
            :log info "SYNC: ‚úÖ Conectividade OK com servidor"
            
            # Obter dados do servidor
            :local syncUrl ($serverUrl . "/api/mikrotik-sync/pending-users")
            :local headers "Authorization: Bearer $syncToken"
            :local syncResult [/tool fetch url=$syncUrl http-header-field=$headers as-value output=user]
            :local syncResponse ($syncResult->"data")
            
            :log info "SYNC: Resposta recebida do servidor"
            :log info "SYNC: Dados: $syncResponse"
            
            # Liberar TODOS os usu√°rios conectados do banco
            :log info "SYNC: Liberando usu√°rios conectados do banco..."
            
            :foreach mac in=$macsConectados do={
                :log info "SYNC: üîì Liberando usu√°rio: $mac"
                $liberarUsuarioPago $mac
                
                # Aguardar 1 segundo entre libera√ß√µes
                :delay 1s
            }
            
            :log info "SYNC: ‚úÖ Todos os usu√°rios conectados foram processados"
            
        } else={
            :log error "SYNC: ‚ùå Servidor n√£o responde - cancelando sync"
        }
        
    } on-error={
        :log error "SYNC: ‚ùå Erro na comunica√ß√£o com servidor"
        
        # Mesmo com erro, liberar usu√°rios conhecidos
        :log info "SYNC: üîÑ Liberando usu√°rios conhecidos mesmo com erro..."
        
        :foreach mac in=$macsConectados do={
            :log info "SYNC: üîì Liberando usu√°rio (modo offline): $mac"
            $liberarUsuarioPago $mac
            :delay 1s
        }
    }
    
    :log info "=== SYNC CORRIGIDO: Finalizado ==="
}

# =====================================================
# FUN√á√ÉO: LIBERAR USU√ÅRIO ESPEC√çFICO (MELHORADA)
# =====================================================
:global liberarUsuarioEspecifico do={
    :local macAddress $1
    :global liberarUsuarioPago
    
    :log info "üéØ LIBERA√á√ÉO ESPEC√çFICA: $macAddress"
    
    # Verificar se usu√°rio j√° est√° liberado
    :local bypassExist [/ip hotspot walled-garden find where comment="BYPASS-$macAddress"]
    :if ([:len $bypassExist] > 0) do={
        :log info "LIBERA√á√ÉO: ‚úÖ Usu√°rio $macAddress j√° est√° liberado"
        :return true
    }
    
    # Liberar usu√°rio
    $liberarUsuarioPago $macAddress
    
    # Verificar se libera√ß√£o funcionou
    :delay 2s
    :local newBypass [/ip hotspot walled-garden find where comment="BYPASS-$macAddress"]
    :if ([:len $newBypass] > 0) do={
        :log info "LIBERA√á√ÉO: ‚úÖ Usu√°rio $macAddress liberado com sucesso!"
        :return true
    } else={
        :log error "LIBERA√á√ÉO: ‚ùå Falha ao liberar usu√°rio $macAddress"
        :return false
    }
}

# =====================================================
# FUN√á√ÉO: VERIFICAR STATUS DOS USU√ÅRIOS
# =====================================================
:global verificarStatusUsuarios do={
    :log info "üìä VERIFICA√á√ÉO DE STATUS DOS USU√ÅRIOS"
    
    # MACs que devem estar liberados
    :local macsConectados {
        "02:BD:48:D9:F1:38";
        "02:BD:48:D9:F1:FE"
    }
    
    :foreach mac in=$macsConectados do={
        :log info "üîç Verificando: $mac"
        
        # Verificar usu√°rio hotspot
        :local hotspotUser [/ip hotspot user find where name=$mac]
        :if ([:len $hotspotUser] > 0) do={
            :local userInfo [/ip hotspot user get $hotspotUser]
            :local disabled ($userInfo->"disabled")
            :local profile ($userInfo->"profile")
            
            :if ($disabled) do={
                :log warning "VERIFICA√á√ÉO: ‚ö†Ô∏è $mac est√° DESABILITADO"
            } else={
                :log info "VERIFICA√á√ÉO: ‚úÖ $mac est√° habilitado (profile: $profile)"
            }
        } else={
            :log warning "VERIFICA√á√ÉO: ‚ùå $mac N√ÉO encontrado no hotspot"
        }
        
        # Verificar bypass
        :local bypassEntry [/ip hotspot walled-garden find where comment="BYPASS-$mac"]
        :if ([:len $bypassEntry] > 0) do={
            :log info "VERIFICA√á√ÉO: ‚úÖ $mac tem bypass total"
        } else={
            :log warning "VERIFICA√á√ÉO: ‚ùå $mac SEM bypass - acesso limitado!"
        }
        
        # Verificar se est√° ativo
        :local activeUser [/ip hotspot active find where mac-address=$mac]
        :if ([:len $activeUser] > 0) do={
            :local activeInfo [/ip hotspot active get $activeUser]
            :local uptime ($activeInfo->"uptime")
            :log info "VERIFICA√á√ÉO: üåê $mac est√° ATIVO (uptime: $uptime)"
        } else={
            :log info "VERIFICA√á√ÉO: üí§ $mac n√£o est√° ativo no momento"
        }
        
        :log info "VERIFICA√á√ÉO: " . ("-" x 50)
    }
}

# =====================================================
# ATUALIZAR SCHEDULER COM FUN√á√ÉO CORRIGIDA
# =====================================================
:log info "üîß Atualizando scheduler com fun√ß√£o corrigida..."

# Remover schedulers antigos
/system scheduler remove [find name="wifi-sync-auto"]
/system scheduler remove [find name="wifi-sync-auto-melhorado"]

# Criar novo scheduler com fun√ß√£o corrigida
/system scheduler add name="wifi-sync-corrigido" start-time=startup interval=2m on-event=":global executarSyncCorrigido; \$executarSyncCorrigido" comment="Sync corrigido com MACs reais - 2 minutos"

:log info "‚úÖ Scheduler atualizado!"

# =====================================================
# EXECUTAR VERIFICA√á√ÉO E LIBERA√á√ÉO IMEDIATA
# =====================================================
:log info "üöÄ Executando verifica√ß√£o e libera√ß√£o imediata..."

# 1. Verificar status atual
$verificarStatusUsuarios

# 2. Executar sync corrigido
$executarSyncCorrigido

# 3. Verificar novamente ap√≥s libera√ß√£o
:delay 5s
$verificarStatusUsuarios

# =====================================================
# COMANDOS √öTEIS PARA MONITORAMENTO
# =====================================================
:put "=== MIKROTIK SYNC CORRIGIDO CONFIGURADO ==="
:put ""
:put "üìã COMANDOS √öTEIS:"
:put "  \$executarSyncCorrigido           - Executar sync com MACs reais"
:put "  \$verificarStatusUsuarios        - Verificar status dos usu√°rios"
:put "  \$liberarUsuarioEspecifico \"MAC\" - Liberar usu√°rio espec√≠fico"
:put ""
:put "üîç MONITORAMENTO:"
:put "  /log print where topics~\"info\"  - Ver logs de sync"
:put "  /ip hotspot user print            - Ver usu√°rios configurados"
:put "  /ip hotspot active print          - Ver usu√°rios ativos"
:put "  /ip hotspot walled-garden print   - Ver regras bypass"
:put ""
:put "üéØ USU√ÅRIOS QUE DEVEM ESTAR LIBERADOS:"
:put "  ‚Ä¢ 02:BD:48:D9:F1:38 (User ID 39)"
:put "  ‚Ä¢ 02:BD:48:D9:F1:FE (User ID 42)"
:put ""
:put "‚ö° CONFIGURA√á√ÉO ATUAL:"
:put "  Intervalo: 2 minutos"
:put "  MACs baseados no banco real"
:put "  Status: ‚úÖ ATIVO"
:put ""
:put "‚úÖ Sistema corrigido e funcionando!"
